@page "/"
@using Microsoft.Extensions.Logging
@using BlazorMsIdentity.Shared.Policy
@inject GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject ILogger<Index> Logger


<h1>Yelloo!</h1>

<AuthorizeView>
    <Authorized>
        <p>Your Roles</p>
        <table class="table table-sm">
            <thead>
            <tr>
                <th>Claim Type</th>
                <th>Claim Value</th>
            </tr>
            </thead>

            <tbody>
            @* @foreach (var claim in context.User.Claims.Where(x=>x.Type == ClaimTypes.Role)){} *@
            @foreach (var claim in context.User.Claims.Where(x => x.Type != "aio"))
            {
                <tr>
                    <td>@claim.Type</td>
                    <td>@claim.Value</td>
                </tr>
            }
            </tbody>
        </table>
    </Authorized>
    <NotAuthorized>
        <p>Please login</p>
    </NotAuthorized>
</AuthorizeView>

<hr>

<AuthorizeView Policy="@CustomPolicies.AdminPolicy">
    <Authorized>
        <p>Here are all users</p>
        <table class="table">
            <thead>
            <tr>
                <th>User ID</th>
                <th>Display Name</th>
                <th>Given Name</th>
                <th>Surname</th>
                <th>Mobile Phone</th>
                <th>Job Title</th>
                <th>Email</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var user in _users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.DisplayName</td>
                    <td>@user.GivenName</td>
                    <td>@user.Surname</td>
                    <td>@user.MobilePhone</td>
                    <td>@user.JobTitle</td>
                    <td>@user.Mail</td>
                </tr>
            }
            </tbody>
        </table>
    </Authorized>
    <NotAuthorized>
        <p>You are not authourized</p>
    </NotAuthorized>
</AuthorizeView>

@code
{
    IGraphServiceUsersCollectionPage _users = new GraphServiceUsersCollectionPage();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var graphRequest = GraphServiceClient
                .Users
                .Request()
                .Select(u => new
                {
                    u.Id,
                    u.DisplayName,
                    u.GivenName,
                    u.Surname,
                    u.MobilePhone,
                    u.JobTitle,
                    u.Mail
                })
                .OrderBy("DisplayName");
            var users = await graphRequest.GetAsync();
            _users = users;
        }
        catch (Exception ex)
        {
            // ConsentHandler.HandleException(ex);
            Logger.LogError("Something went wrong", ex.Message);
        }
    }
}